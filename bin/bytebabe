#!/bin/bash

# Carrega o diretório base
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Carrega as dependências
source "$BASE_DIR/lib/core/colors.sh"
source "$BASE_DIR/lib/core/helpers.sh"
source "$BASE_DIR/lib/core/alias_manager.sh"

# Função para mostrar o header cyberpunk
show_cyberpunk_header() {
    echo -e "${CYBER_PINK}╔════════════════════════════════════════════════╗"
    echo -e "║             BYTEBABE CLI                     ║"
    echo -e "╚════════════════════════════════════════════════╝${RESET}"
}

# Expande aliases se necessário
if [ $# -gt 0 ]; then
    expanded=$(expand_alias "$1")
    if [ ! -z "$expanded" ]; then
        shift
        set -- $expanded "$@"
    fi
fi

VERSION="0.1.2"

# Show version information
show_version() {
    echo -e "${CYBER_PINK}╔════════════════════════════════════════════════╗       "
    echo -e "║${CYBER_CYAN}       ▓▓▓ BYTEBABE CLI v${VERSION} ▓▓▓ ${CYBER_PINK}"
    echo -e "║${CYBER_GREEN}   ░▓█►  System: $(uname -srm)${CYBER_PINK}               "
    echo -e "║${CYBER_GREEN}   ░▓█►  Shell: $(basename $SHELL)${CYBER_PINK}           "
    echo -e "║${CYBER_GREEN}   ░▓█►  Uptime: $(uptime -p)${CYBER_PINK}                "
    echo -e "╚════════════════════════════════════════════════╝${RESET}"
}

show_cyberpunk_header

# Process commands
case "$1" in
    alias)
        shift
        main "$@"
        ;;
    hello)
        source "${BASE_DIR}/commands/hello.sh" "${@:2}"
        ;;
    init)
        source "${BASE_DIR}/commands/init.sh" "${@:2}"
        ;;
    git)
        source "${BASE_DIR}/commands/git/main.sh"
        ;;
    frontend)
        source "${BASE_DIR}/commands/frontend.sh" "${@:2}"
        ;;
    backend)
        source "${BASE_DIR}/commands/backend.sh" "${@:2}"
        ;;
    spring)
        source "${BASE_DIR}/commands/backend/spring/main.sh" "${@:2}"
        ;;
    servers)
        source "${BASE_DIR}/commands/servers.sh" "${@:2}"
        ;;
    db)
        source "${BASE_DIR}/commands/db.sh" "${@:2}"
        ;;
    datavision|dv)
        source "${BASE_DIR}/lib/database/datavision.sh"
        datavision_main "${@:2}"
        ;;
    edit|byteedit)
         source "${BASE_DIR}/commands/byteedit.sh" "${@:2}"
        ;;
    ide)
        source "${BASE_DIR}/commands/ide.sh" "${@:2}"
        ;;
    devtools)
        source "${BASE_DIR}/commands/devtools.sh" "${@:2}"
        ;;
    docker)
        source "${BASE_DIR}/commands/docker.sh" "${@:2}"
        ;;
    prime|pm)
        source "${BASE_DIR}/commands/prime.sh" "${@:2}"
        ;;
    gh|github)
        source "${BASE_DIR}/commands/gh.sh" "${@:2}"
        ;;
    flux)
        source "${BASE_DIR}/commands/flux.sh" "${@:2}"
        ;;
    --version|-v)
        show_version
        exit 0
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}CORE COMMANDS:${RESET}"
        echo -e "  ${CYBER_GREEN}hello${RESET}         Receba uma mensagem cyberpunk aleatória"
        echo -e "  ${CYBER_GREEN}init${RESET}          Initialize development environment"
        echo -e "  ${CYBER_GREEN}edit${RESET}          Edit ByteBabe configuration files"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}DEVELOPMENT STACK:${RESET}"
        echo -e "  ${CYBER_GREEN}frontend${RESET}      Frontend development tools"
        echo -e "    ${CYBER_GRAY}└─ setup${RESET}     Configure frontend environment"
        echo -e "  ${CYBER_GREEN}backend${RESET}       Backend development tools"
        echo -e "    ${CYBER_GRAY}└─ setup${RESET}     Configure backend environment"
        echo -e "    ${CYBER_GRAY}└─ install${RESET}   Install specific technology"
        echo -e "  ${CYBER_GREEN}spring${RESET}        Spring Boot development tools"
        echo -e "    ${CYBER_GRAY}└─ new${RESET}       Create new Spring Boot project"
        echo -e "    ${CYBER_GRAY}└─ generate${RESET}  Generate Spring components"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}DEVELOPMENT TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}ide${RESET}           IDE management"
        echo -e "    ${CYBER_GRAY}└─ vscode${RESET}    VSCode setup and extensions"
        echo -e "    ${CYBER_GRAY}└─ intellij${RESET}  IntelliJ IDEA setup"
        echo -e "  ${CYBER_GREEN}devtools${RESET}      Development utilities"
        echo -e "    ${CYBER_GRAY}└─ terminal${RESET}  Terminal configuration (Zsh/OhMyZsh)"
        echo -e "    ${CYBER_GRAY}└─ database${RESET}  Database tools (DBeaver/Compass)"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}VERSION CONTROL:${RESET}"
        echo -e "  ${CYBER_GREEN}git${RESET}           Advanced Git operations"
        echo -e "  ${CYBER_GREEN}gh${RESET}, ${CYBER_GREEN}github${RESET}    GitHub CLI tools and shortcuts"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}INFRASTRUCTURE:${RESET}"
        echo -e "  ${CYBER_GREEN}servers${RESET}       Server management"
        echo -e "    ${CYBER_GRAY}└─ up/down${RESET}   Start/stop servers"
        echo -e "    ${CYBER_GRAY}└─ status${RESET}    Check server status"
        echo -e "  ${CYBER_GREEN}docker${RESET}        Docker operations"
        echo -e "    ${CYBER_GRAY}└─ up/down${RESET}   Container management"
        echo -e "    ${CYBER_GRAY}└─ logs${RESET}      Container logs"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}DATABASE TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}db${RESET}            Database operations"
        echo -e "    ${CYBER_GRAY}└─ setup${RESET}     Configure databases"
        echo -e "    ${CYBER_GRAY}└─ install${RESET}   Install specific database"
        echo -e "  ${CYBER_GREEN}datavision${RESET}, ${CYBER_GREEN}dv${RESET}  Database manager (like DBeaver)"
        echo -e "    ${CYBER_GRAY}└─ connect${RESET}   Connect to database"
        echo -e "    ${CYBER_GRAY}└─ add${RESET}       Add new connection"
        echo -e "    ${CYBER_GRAY}└─ list${RESET}      List saved connections"
        echo -e "    ${CYBER_GRAY}└─ remove${RESET}    Remove connection"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}API TOOLS:${RESET}"
        echo -e "  ${CYBER_GREEN}flux${RESET}          Terminal API Studio 🌊"
        echo -e "  ${CYBER_GREEN}prime${RESET}, ${CYBER_GREEN}pm${RESET}     Prime API tools"
        echo -e ""
        echo -e "${CYBER_YELLOW}⚡ ${CYBER_BLUE}SYSTEM:${RESET}"
        echo -e "  ${CYBER_GREEN}--version${RESET}, ${CYBER_GREEN}-v${RESET}  Show CLI version"
        echo -e "  ${CYBER_GREEN}--help${RESET}, ${CYBER_GREEN}-h${RESET}     Show this help message"
        echo -e ""
        echo -e "${CYBER_PURPLE}╰┈➤ ${CYBER_GRAY}For detailed command help, use: ${CYBER_CYAN}bytebabe <command> --help${RESET}"
        ;;
esac